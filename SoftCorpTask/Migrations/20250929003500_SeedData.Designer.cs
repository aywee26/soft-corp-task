// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoftCorpTask.Contexts;

#nullable disable

namespace SoftCorpTask.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250929003500_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SoftCorpTask.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateDataId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkGroupId");

                    b.ToTable("Candidates", (string)null);
                });

            modelBuilder.Entity("SoftCorpTask.Entities.CandidateData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatronymicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.ToTable("CandidateDatas", (string)null);
                });

            modelBuilder.Entity("SoftCorpTask.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateDataId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("HiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidateDataId")
                        .IsUnique();

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("SoftCorpTask.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("SoftCorpTask.Entities.SocialNetworkData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateDataId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateDataId");

                    b.ToTable("SocialNetworkDatas", (string)null);
                });

            modelBuilder.Entity("SoftCorpTask.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WorkGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("WorkGroupId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SoftCorpTask.Entities.WorkGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkGroups", (string)null);
                });

            modelBuilder.Entity("SoftCorpTask.Entities.Candidate", b =>
                {
                    b.HasOne("SoftCorpTask.Entities.WorkGroup", "WorkGroup")
                        .WithMany("Candidates")
                        .HasForeignKey("WorkGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("SoftCorpTask.Entities.CandidateData", b =>
                {
                    b.HasOne("SoftCorpTask.Entities.Candidate", "Candidate")
                        .WithOne("CandidateData")
                        .HasForeignKey("SoftCorpTask.Entities.CandidateData", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("SoftCorpTask.Entities.Employee", b =>
                {
                    b.HasOne("SoftCorpTask.Entities.CandidateData", "CandidateData")
                        .WithOne("Employee")
                        .HasForeignKey("SoftCorpTask.Entities.Employee", "CandidateDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateData");
                });

            modelBuilder.Entity("SoftCorpTask.Entities.SocialNetworkData", b =>
                {
                    b.HasOne("SoftCorpTask.Entities.CandidateData", "CandidateData")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("CandidateDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateData");
                });

            modelBuilder.Entity("SoftCorpTask.Entities.User", b =>
                {
                    b.HasOne("SoftCorpTask.Entities.WorkGroup", "WorkGroup")
                        .WithMany("Users")
                        .HasForeignKey("WorkGroupId");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("SoftCorpTask.Entities.Candidate", b =>
                {
                    b.Navigation("CandidateData")
                        .IsRequired();
                });

            modelBuilder.Entity("SoftCorpTask.Entities.CandidateData", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("SocialNetworks");
                });

            modelBuilder.Entity("SoftCorpTask.Entities.WorkGroup", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
